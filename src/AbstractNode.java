import java.io.Serializable;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.rmi.RemoteException;
import java.rmi.server.UnicastRemoteObject;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

import utils.P2PLogger;

/**
 * The sub abstract class for Interface Node.
 */
public abstract class AbstractNode extends UnicastRemoteObject implements Node, Serializable {
  private static final long serialVersionUID = 1L;

  // m is the finger table size
  protected static int m = 32;
  protected static int staticM;

  // Chord Node id
  protected int id;
  // Chord Node ip address
  protected String ipAddress;
  // Chord Node port number
  protected int portNum;
  // Chord Node finger table
  protected FingerTableValue[] fingerTable;

  // logger utils
  protected P2PLogger log;

  // Chord Node predecessor
  protected Node predecessor;

  /**
   * Construct a Chord Node with given ip address and port number.
   * Notice:
   * m is designed as a fixed-size finger table in this project for easier testing, though it can
   * also be another input argument.
   * id is generated by specific helper method, generatedId, by using SHA-256 hash.
   *
   * @param ipAddress the given ip address
   * @param portNum   the given port number
   * @throws RemoteException
   * @throws UnsupportedEncodingException
   * @throws NoSuchAlgorithmException
   */
  public AbstractNode(String ipAddress, int portNum) throws RemoteException, UnsupportedEncodingException, NoSuchAlgorithmException {
    super();
    this.ipAddress = ipAddress;
    this.portNum = portNum;
    this.id = generateId(ipAddress, portNum);
    //this.m = 32;
    staticM = this.m;
    this.fingerTable = new FingerTableValue[m + 1];
    this.predecessor = null;
    this.log = new P2PLogger("NodeLogger");
  }

  /**
   * Helper method for generated id for each Chord Node by using SHA-256 hashing.
   *
   * @param ipAddress given ip address
   * @param portNum   given port number
   * @return the id generated for each Chord Node
   * @throws NoSuchAlgorithmException
   * @throws UnsupportedEncodingException
   */
  public int generateId(String ipAddress, int portNum) throws NoSuchAlgorithmException, UnsupportedEncodingException {
    MessageDigest md = MessageDigest.getInstance("SHA-256"); // SHA for simple and quick hashing
    String strToEncode = String.valueOf(ipAddress) + String.valueOf(portNum) + System.currentTimeMillis();
    md.update(strToEncode.getBytes("UTF-8"));
    byte[] digestBuff = md.digest();
    BigInteger hashVal = new BigInteger(1, digestBuff);
    return Math.abs(hashVal.intValue()) % (int) Math.pow(2, m);
  }

  @Override
  public int getId() {
    return id;
  }

  @Override
  public void setId(int id) {
    this.id = id;
  }

  @Override
  public String getIpAddress() {
    return ipAddress;
  }

  @Override
  public void setIpAddress(String ipAddress) {
    this.ipAddress = ipAddress;
  }

  @Override
  public int getPortNum() {
    return portNum;
  }

  @Override
  public void setPortNum(int portNum) {
    this.portNum = portNum;
  }

  public Node getSuccessor() throws RemoteException {
    if (fingerTable != null && fingerTable.length > 0)
      return this.fingerTable[1].getNode();

    return null;
  }

  public void setSuccessor(Node node) throws RemoteException {
    this.fingerTable[1].setNode(node);
  }

  public Node getPredecessor() throws RemoteException {
    return predecessor;
  }

  public void setPredecessor(Node node) throws RemoteException {
    this.predecessor = node;
  }


}
